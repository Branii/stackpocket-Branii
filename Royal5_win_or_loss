<?php
declare (strict_types = 1);
class fiveD
{

    // Helper functions // ----------------------------------->
    public static function findPattern(array $pattern, array $drawNumbers, Int $index, Int $slice, bool $flag = false): bool
    {// find patterns in drawsNumbers
        $drawNumbers = !$flag ? array_count_values(array_slice($drawNumbers, $index, $slice)) :
        array_count_values(array_slice($drawNumbers, $slice));
        sort($drawNumbers);
        sort($pattern);
        return $drawNumbers === $pattern;
    }

    public static function DT(Int $idx1, Int $idx2, array $drawNumber): String
    {// dragon|tiger|tie pattern
        $drawNumber = explode(",", implode(",", $drawNumber));
        $v1 = $drawNumber[$idx1];
        $v2 = $drawNumber[$idx2];
        return ($v1 > $v2) ? 1 : (($v1 == $v2) ? 3 : 2);
    }

    public static function findStreakPattern(array $drawNumber, Int $index, Int $slice, Int $streakCount, bool $flag = false): Bool
    {// streak pattern
        $drawNumber = !$flag ? array_slice($drawNumber, $index, $slice) : array_slice($drawNumber, $slice);
        $count = 0;
        $n = count($drawNumber);
        sort($drawNumber);
        if (($drawNumber[0] == 0 && $drawNumber[$n - 1] == 9) || ($drawNumber[0] == 9 && $drawNumber[$n - 1] == 0)) {
            $count++;
        }
        for ($i = 0; $i < $n - 1; $i++) {
            if ($drawNumber[$i] == $drawNumber[$i + 1] - 1) {
                $count++;
            }
        }return $count == $streakCount;
    }

    // All_5 // ----------------------------------->

    public static function all5_straight_joint(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber[0], $selection[0]) &&
            in_array($drawnumber[1], $selection[1]) &&
            in_array($drawnumber[2], $selection[2]) &&
            in_array($drawnumber[3], $selection[3]) &&
            in_array($drawnumber[4], $selection[4])) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function all5_straight_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function all5_straight_combo(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = array_reduce(range(0, 4), fn($carry, $i) => $carry + (int) in_array($drawnumber[$i], $selection[$i]), 0);
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => [$count],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all5_group_120(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $selected = $selection[0];
        sort($selected);
        sort($drawnumber);
        $count = count(array_intersect($selected, $drawnumber)) == 5 ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all5_group_60(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([2, 1, 1, 1], $drawnumber, 0, 5) &&
            in_array(max(array_count_values($drawnumber)), $selection[0]) &&
            count(array_intersect($selection[1], array_values(array_diff($drawnumber, [max(array_count_values($drawnumber))])))) == 3) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all5_group_30(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $val = array_count_values($drawnumber);
        if (self::findPattern([2, 2, 1], $drawnumber, 0, 5)) {
            $arr = array_values(array_diff($drawnumber, [array_search(min($val), $val)]));
            if (in_array(array_search(min($val), $val), $selection[1]) &&
                count(array_intersect(array_unique($arr), $selection[0])) == 2) {
                $count = 1;
            };
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all5_group_20(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $val = array_count_values($drawnumber);
        if (self::findPattern([3, 1, 1], $drawnumber, 0, 5)) {
            $arr = array_values(array_diff($drawnumber, [array_search(max($val), $val)]));
            if (in_array(array_search(max($val), $val), $selection[0]) &&
                count(array_intersect($arr, $selection[1])) == 2) {
                $count = 1;
            };
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all5_group_10(array $selection, array $drawnumber, Int $gameId = null)
    {
        $count = 0;
        $val = array_count_values($drawnumber);
        if (self::findPattern([3, 2], $drawnumber, 0, 5)) {
            //$arr = array_values(array_diff($drawnumber, [array_search(max($val), $val)]));
            if (in_array(array_search(max($val), $val), $selection[0]) &&
                in_array(array_search(min($val), $val), $selection[1])) {
                $count = 1;
            };
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all5_group_5(array $selection, array $drawnumber, Int $gameId = null)
    {
        $count = 0;
        $val = array_count_values($drawnumber);
        if (self::findPattern([4, 1], $drawnumber, 0, 5)) {
            //$arr = array_values(array_diff($drawnumber, [array_search(max($val), $val)]));
            if (in_array(array_search(max($val), $val), $selection[0]) &&
                in_array(array_search(min($val), $val), $selection[1])) {
                $count = 1;
            };
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    // All_4 // ---------------------------------------->

    public static function all4_first4_straight_joint(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber[0], $selection[0]) &&
            in_array($drawnumber[1], $selection[1]) &&
            in_array($drawnumber[2], $selection[2]) &&
            in_array($drawnumber[3], $selection[3])) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function all4_first4_straight_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function all4_first4_straight_combo(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = array_reduce(range(0, 3), fn($carry, $i) => $carry + (int) in_array($drawnumber[$i], $selection[$i]), 0);
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => [$count],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all4_last4_straight_joint(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber[1], $selection[0]) &&
            in_array($drawnumber[2], $selection[1]) &&
            in_array($drawnumber[3], $selection[2]) &&
            in_array($drawnumber[4], $selection[3])) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function all4_last4_straight_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function all4_last4_straight_combo(array $selection, array $drawnumber, Int $gameId = null): array
    {
        unset($drawnumber[0]);
        $count = array_reduce(range(0, 3), fn($carry, $i) => $carry + (int) in_array($drawnumber[$i], $selection[$i]), 0);
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => [$count],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all4_first4_group_24(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([1, 1, 1, 1], $drawnumber, 0, 4)) {
            if (count(array_intersect(array_slice($drawnumber, 0, 4), $selection[0])) == 4) {
                $count = 1;
            }
        }
        //return count(array_intersect(array_slice($drawnumber, 0, 4),$selection[0]));
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all4_first4_group_12(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([2, 1, 1], $drawnumber, 0, 4)) {
            $val = array_count_values(array_slice($drawnumber, 0, 4));
            $arr = array_values(array_diff(array_slice($drawnumber, 0, 4), [array_search(max($val), $val)]));
            if (in_array(array_search(min($val), $val), $selection[0]) && array_intersect(array_unique($arr), $selection[1])) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all4_first4_group_6(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([2, 2], $drawnumber, 0, 4)) {
            if (array_intersect(array_unique(array_slice($drawnumber, 0, 4)), $selection[0])) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all4_first4_group_4(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([3, 1], $drawnumber, 0, 4)) {
            $val = array_count_values(array_slice($drawnumber, 0, 4));
            $arr = array_values(array_diff(array_slice($drawnumber, 0, 4), [array_search(max($val), $val)]));
            if (in_array(array_search(max($val), $val), $selection[0]) && count(array_intersect($arr, $selection[1])) == 1) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all4_last4_group_24(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        unset($drawnumber[0]);
        if (self::findPattern([1, 1, 1, 1], $drawnumber, 0, 4)) {
            if (count(array_intersect(array_slice($drawnumber, 0, 4), $selection[0])) == 4) {
                $count = 1;
            }
        }
        //return count(array_intersect(array_slice($drawnumber, 0, 4),$selection[0]));
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all4_last4_group_12(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        unset($drawnumber[0]);
        if (self::findPattern([2, 1, 1], $drawnumber, 0, 4)) {
            $val = array_count_values(array_slice($drawnumber, 0, 4));
            $arr = array_values(array_diff(array_slice($drawnumber, 0, 4), [array_search(max($val), $val)]));
            if (in_array(array_search(min($val), $val), $selection[0]) && array_intersect(array_unique($arr), $selection[1])) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all4_last4_group_6(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        unset($drawnumber[0]);
        if (self::findPattern([2, 2], $drawnumber, 0, 4)) {
            if (array_intersect(array_unique(array_slice($drawnumber, 0, 4)), $selection[0])) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function all4_last4_group_4(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        unset($drawnumber[0]);
        if (self::findPattern([3, 1], $drawnumber, 0, 4)) {
            $val = array_count_values($drawnumber);
            $arr = array_values(array_diff($drawnumber, [array_search(max($val), $val)]));
            if (in_array(array_search(max($val), $val), $selection[0]) && count(array_intersect($arr, $selection[1])) == 1) {
                $count = 1;
            }
            //return $arr;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    // first3 // ---------------------------------------->

    public static function first3_first3_straight_joint(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber[0], $selection[0]) &&
            in_array($drawnumber[1], $selection[1]) &&
            in_array($drawnumber[2], $selection[2])) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function first3_first3_straight_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function first3_first3_straight_combo(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = array_reduce(range(0, 2), fn($carry, $i) => $carry + (int) in_array($drawnumber[$i], $selection[$i]), 0);
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$count] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first3_sum_of_first3(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = in_array(array_sum(array_slice($drawNumbers, 0, 3)), $selection[0]) ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first3_span_of_first3(array $selection, array $drawnumber, Int $gameId = null)
    {
        $draws = array_slice($drawnumber, 0, 3);
        $counter = max($draws) - min($draws);
        $count = in_array($counter, $selection[0]) ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first3_first3_group_3(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([2, 1], $drawnumber, 0, 3)) {
            $val = array_count_values(array_slice($drawnumber, 0, 3));
            $arr = array_values(array_diff(array_slice($drawnumber, 0, 3), [array_search(max($val), $val)]));
            if (in_array(array_search(max($val), $val), $selection[0]) && count(array_intersect($arr, $selection[0])) == 1) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first3_first3_group_6(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([1, 1, 1], $drawnumber, 0, 3)) {
            if (count(array_intersect(array_slice($drawnumber, 0, 3), $selection[0])) == 3) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first3_first3_group_combo_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function first3_first3_sum_of_group(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([1, 1, 1], $drawnumber, 0, 3) && in_array(array_sum(array_slice($drawnumber, 0, 3)), $selection[0])) {
            $count = 30;
        } else if (self::findPattern([2, 1], $drawnumber, 0, 3) && in_array(array_sum(array_slice($drawnumber, 0, 3)), $selection[0])) {
            $count = 29;
        }

        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$count] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first3_first3_group3_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function first3_first3_group6_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function first3_first3_fixed_digit(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $val = array_count_values(array_slice($drawnumber, 0, 3));
        if (self::findPattern([1, 1, 1], $drawnumber, 0, 3) && in_array($selection[0][0], array_slice($drawnumber, 0, 3))) {
            $count = 30;
        } else if (self::findPattern([2, 1], $drawnumber, 0, 3) && in_array(array_search(max($val), $val), $selection[0])) {
            $count = 29;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$count] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first3_first3_sum_tail(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $val = array_count_values(array_slice($drawnumber, 0, 3));
        $drawnumber = array_slice($drawnumber, 0, 3);
        unset($drawnumber[0]);
        if (in_array(array_sum($drawnumber), $selection[0])) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    // mid3 // ---------------------------------------->

    public static function mid3_straight_joint(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber[1], $selection[0]) &&
            in_array($drawnumber[2], $selection[1]) &&
            in_array($drawnumber[3], $selection[2])) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function mid3_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function mid3_combo(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $drawnumber = array_slice($drawnumber, 1, 3);
        $count = array_reduce(range(0, 2), fn($carry, $i) => $carry + (int) in_array($drawnumber[$i], $selection[$i]), 0);
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$count] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function mid3_sum(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = in_array(array_sum(array_slice($drawnumber, 1, 3)), $selection[0]) ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function mid3_span(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $draws = array_slice($drawnumber, 1, 3);
        $counter = max($draws) - min($draws);
        $count = in_array($counter, $selection[0]) ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function mid3_group_3(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([2, 1], $drawnumber, 1, 3)) {
            $val = array_count_values(array_slice($drawnumber, 0, 3));
            $arr = array_values(array_diff(array_slice($drawnumber, 1, 3), [array_search(max($val), $val)]));
            if (in_array(array_search(max($val), $val), $selection[0]) && count(array_intersect($arr, $selection[0])) == 1) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function mid3_group_6(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([1, 1, 1], $drawnumber, 1, 3)) {
            if (count(array_intersect(array_slice($drawnumber, 1, 3), $selection[0])) == 3) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function mid3_group_combo_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function mid3_sum_of_group(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([1, 1, 1], $drawnumber, 1, 3) && in_array(array_sum(array_slice($drawnumber, 1, 3)), $selection[0])) {
            $count = 30;
        } else if (self::findPattern([2, 1], $drawnumber, 1, 3) && in_array(array_sum(array_slice($drawnumber, 1, 3)), $selection[0])) {
            $count = 29;
        }

        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$count] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function mid3_group3_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function mid3_group6_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function mid_fixed_digit(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $val = array_count_values(array_slice($drawnumber, 0, 3));
        if (self::findPattern([1, 1, 1], $drawnumber, 1, 3) && in_array($selection[0][0], array_slice($drawnumber, 1, 3))) {
            $count = 30;
        } else if (self::findPattern([2, 1], $drawnumber, 1, 3) && in_array(array_search(max($val), $val), $selection[0])) {
            $count = 29;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$count] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function mid3_sum_tail(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $val = array_count_values(array_slice($drawnumber, 1, 3));
        $drawnumber = array_slice($drawnumber, 1, 3);
        unset($drawnumber[0]);
        if (in_array(array_sum($drawnumber), $selection[0])) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    // last3 // ---------------------------------------->

    public static function last3_straight_joint(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber[2], $selection[0]) &&
            in_array($drawnumber[3], $selection[1]) &&
            in_array($drawnumber[4], $selection[2])) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function last3_straight_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function last3_straight_combo(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $drawnumber = array_slice($drawnumber, -3);
        $count = array_reduce(range(0, 2), fn($carry, $i) => $carry + (int) in_array($drawnumber[$i], $selection[$i]), 0);
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$count] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function last3_sum(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = in_array(array_sum(array_slice($drawnumber, -3)), $selection[0]) ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function last3_span(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $draws = array_slice($drawnumber, -3);
        $counter = max($draws) - min($draws);
        $count = in_array($counter, $selection[0]) ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function last3_group_3(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([2, 1], $drawnumber, 0, 3, true)) {
            $val = array_count_values(array_slice($drawnumber, -3));
            $arr = array_values(array_diff(array_slice($drawnumber, -3), [array_search(max($val), $val)]));
            if (in_array(array_search(max($val), $val), $selection[0]) && count(array_intersect($arr, $selection[0])) == 1) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function last3_group_6(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([1, 1, 1], $drawnumber, 1, 3, true)) {
            if (count(array_intersect(array_slice($drawnumber, 1, -3), $selection[0])) == 3) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function last3_group_combo_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function last3_sum_of_group(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([1, 1, 1], $drawnumber, 0, 3, true) && in_array(array_sum(array_slice($drawnumber, -3)), $selection[0])) {
            $count = 30;
        } else if (self::findPattern([2, 1], $drawnumber, 0, 3, true) && in_array(array_sum(array_slice($drawnumber, -3)), $selection[0])) {
            $count = 29;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$count] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function last3_group3_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function last3_group6_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function last3_fixed_digit(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $val = array_count_values(array_slice($drawnumber, -3));
        if (self::findPattern([1, 1, 1], $drawnumber, 1, 3, true) && in_array($selection[0][0], array_slice($drawnumber, -3))) {
            $count = 30;
        } else if (self::findPattern([2, 1], $drawnumber, 1, 3, true) && in_array(array_search(max($val), $val), $selection[0])) {
            $count = 29;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$count] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function last3_sum_tail(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $val = array_count_values(array_slice($drawnumber, -3));
        $drawnumber = array_slice($drawnumber, -3);
        unset($drawnumber[0]);
        if (in_array(array_sum($drawnumber), $selection[0])) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first2_straight_joint(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (in_array($drawnumber[0], $selection[0]) &&
            in_array($drawnumber[1], $selection[1])) {
            $count = 1;
        }
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first2_straight_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (in_array($drawnumber, $selection[0])) {
            $count = 1;
        }
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first2_sum_of_first2(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = in_array(array_sum(array_slice($drawnumber, 0, 2)), $selection[0]) ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first2_span_of_first2(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $draws = array_slice($drawnumber, 0, 2);
        $counter = max($draws) - min($draws);
        $count = in_array($counter, $selection[0]) ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first2_group_joint(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, 0, 2);
        if (count(array_intersect($drawnumber, $selection[0])) == 2) {
            $count = 1;
        }
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first2_group_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function first2_sum_of_group(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = in_array(array_sum(array_slice($drawnumber, 0, 2)), $selection[0]) ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function first2_fixed_digit(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (self::findPattern([1, 1], $drawnumber, 0, 2) && in_array(array_sum(array_slice($drawnumber, 0, 2)), $selection[0])) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    //last2// ------------------------------>

    public static function last2_straight_joint(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (in_array($drawnumber[3], $selection[0]) &&
            in_array($drawnumber[4], $selection[1])) {
            $count = 1;
        }
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function last2_straight_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        if (in_array($drawnumber, $selection[0])) {
            $count = 1;
        }
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function last2_sum_of_last2(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = in_array(array_sum(array_slice($drawnumber, -2)), $selection[0]) ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function last2_span_of_last2(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $draws = array_slice($drawnumber, -2);
        $counter = max($draws) - min($draws);
        $count = in_array($counter, $selection[0]) ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function last2_group_joint(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, -2);
        if (count(array_intersect($drawnumber, $selection[0])) == 2) {
            $count = 1;
        }
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function last2_group_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $gameIds = [];
        if (in_array($drawnumber, $selection)) {
            $gameIds[] = $gameId;
        }
        return [
            'numwins' => count($gameIds),
            'gameids' => $gameIds,
            'status' => $gameIds ? 'Won' : 'Lost',
        ];
    }

    public static function last2_sum_of_group(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = in_array(array_sum(array_slice($drawnumber, -2)), $selection[0]) ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function last2_fixed_digit(array $selection, array $drawnumber, Int $gameId = null)
    {
        $count = 0;
        if (self::findPattern([1, 1], $drawnumber, 0, 2, true) && in_array($selection[0][0], array_slice($drawnumber, -2))) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    //fixed place// ------------------------->

    public static function fixed_place(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $count = array_reduce(range(0, 4), fn($carry, $i) => $carry + (int) in_array($drawnumber[$i], $selection[$i]), 0);
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => [$count],
            'status' => $count ? 'Won' : 'Lost',
        ];
    } // review this

    //any place// --------------------------->

    public static function any_place_1x3_first3(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, 0, 3);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 1) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function any_place_2x3_first3(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, 0, 3);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 2) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function any_place_1x3_mid3(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, 1, 3);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 1) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function any_place_2x3_mid3(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, 1, 3);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 2) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function any_place_1x3_last3(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, -3);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 1) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function any_place_2x3_last3(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, -3);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 2) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function any_place_1x4_first4(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, 0, 4);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 1) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function any_place_2x4_first4(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, 0, 4);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 2) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function any_place_1x4_last4(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, -4);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 1) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function any_place_2x4_last4(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, -4);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 2) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function any_place_3x4_last4(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, -4);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 3) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function any_place_1x5_first5(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, 0, 5);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 1) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function any_place_2x5_first5(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, 0, 5);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 2) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function any_place_3x5_first5(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $drawnumber = array_slice($drawnumber, 0, 5);
        $draws = array_unique($drawnumber);
        if (count(array_intersect($draws, $selection[0])) >= 3) {
            $count = 1;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    //b s o e// --------------------------->

    public static function bsoe_first2(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $data = [
            '1' => range(5, 9), // big
            '2' => range(0, 4), // small
            '3' => range(1, 7, 2), // odd
            '4' => range(0, 8, 2), // even
        ];
        $count1 = count(array_filter($selection[0], fn($sel) => in_array($drawnumber[0], $data[$sel])));
        $count2 = count(array_filter($selection[1], fn($sel) => in_array($drawnumber[1], $data[$sel])));
        $count = $count1 * $count2;
        return [
            'numwins' => $count ?: 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function bsoe_first3(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $data = [
            '1' => range(5, 9), // big
            '2' => range(0, 4), // small
            '3' => range(1, 7, 2), // odd
            '4' => range(0, 8, 2), // even
        ];
        $count1 = count(array_filter($selection[0], fn($sel) => in_array($drawnumber[0], $data[$sel])));
        $count2 = count(array_filter($selection[1], fn($sel) => in_array($drawnumber[1], $data[$sel])));
        $count3 = count(array_filter($selection[2], fn($sel) => in_array($drawnumber[2], $data[$sel])));
        $count = $count1 * $count2 * $count3;
        return [
            'numwins' => $count ?: 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function bsoe_last2(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $data = [
            '1' => range(5, 9), // big
            '2' => range(0, 4), // small
            '3' => range(1, 7, 2), // odd
            '4' => range(0, 8, 2), // even
        ];
        $count1 = count(array_filter($selection[0], fn($sel) => in_array($drawnumber[3], $data[$sel])));
        $count2 = count(array_filter($selection[1], fn($sel) => in_array($drawnumber[4], $data[$sel])));
        $count = $count1 * $count2;
        return [
            'numwins' => $count ?: 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function bsoe_last3(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $data = [
            '1' => range(5, 9), // big
            '2' => range(0, 4), // small
            '3' => range(1, 7, 2), // odd
            '4' => range(0, 8, 2), // even
        ];
        $count1 = count(array_filter($selection[0], fn($sel) => in_array($drawnumber[2], $data[$sel])));
        $count2 = count(array_filter($selection[1], fn($sel) => in_array($drawnumber[3], $data[$sel])));
        $count3 = count(array_filter($selection[2], fn($sel) => in_array($drawnumber[4], $data[$sel])));
        $count = $count1 * $count2 * $count3;
        return [
            'numwins' => $count ?: 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function bsoe_sum_all5(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $data = [
            '1' => range(23, 45), // big
            '2' => range(0, 22), // small
            '3' => range(1, 7, 2), // odd
            '4' => range(0, 8, 2), // even
        ];
        $sum = array_sum($drawnumber);
        $count = count(array_filter($selection[0], fn($sel) => in_array($sum, $data[$sel])));
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function bsoe_sum_all3(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $data = [
            '1' => range(14, 27), // big
            '2' => range(0, 13), // small
            '3' => range(1, 7, 2), // odd
            '4' => range(0, 8, 2), // even
        ];
        $sum = array_sum(array_slice($drawnumber, 0, 3));
        $count = count(array_filter($selection[0], fn($sel) => in_array($sum, $data[$sel])));
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    //fun// -------------------------------->

    public static function fun_one_hit(array $selection, array $drawnumber, Int $gameId = null): array
    {

        $draw = array_unique($drawnumber);
        $count = count(array_intersect($draw, $selection[0])) >= 1 ? 1 : 0;
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function fun_two_hit(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $val = array_count_values($drawnumber);
        if (in_array(array_search(max($val), $val), $selection[0]) && max($val) >= 2) { // review
            $count = 1;
        }
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function fun_three_hit(array $selection, array $drawnumber, Int $gameId = null): array
    { // review
        $count = 0;
        $val = array_count_values($drawnumber);
        if (in_array(array_search(max($val), $val), $selection[0]) && max($val) >= 3) {
            $count = 1;
        }
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function fun_four_hit(array $selection, array $drawnumber, Int $gameId = null): array
    { // review
        $count = 0;
        $val = array_count_values($drawnumber);
        if (in_array(array_search(max($val), $val), $selection[0]) && max($val) >= 4) {
            $count = 1;
        }
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    //pick 2// ---------------------------->

    public static function pick2_joint(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $counts = [0, 0, 0, 0, 0];

        for ($i = 0; $i < 5; $i++) {
            if (in_array($drawnumber[$i], $selection[$i])) {
                $counts[$i]++;
            }
        }
        $count = array_reduce($counts, function ($carry, $item) {
            return $carry + ($item > 0 ? 1 : 0);
        }, 0);

        return [
            'numwins' => $count >= 2 ? 1 : 0,
            'gameids' => $count >= 2 ? [$gameId] : [],
            'status' => $count >= 2 ? 'Won' : 'Lost',
        ];
    }

    public static function pick2_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        //manual
    }

    public static function pick2_sum(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $result = array_map(fn($position) => $drawnumber[$position - 1] ?? null, $selection[0]);
        $count = in_array(array_sum($result), $selection[1]) ? 1 : 0;
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function pick2__group_joint(array $selection, array $drawnumber, int $gameId = null): array
    {
        $result = array_map(fn($position) => $drawnumber[$position - 1] ?? null, $selection[0]);
        $count = count(array_intersect($result, $selection[1])) >= count($selection[0]) ? 1 : 0;
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function pick2_group_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        //manual
    }

    public static function pick2_group_sum(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $result = array_map(fn($position) => $drawnumber[$position - 1] ?? null, $selection[0]);
        $count = 0;
        if (max(array_count_values($result)) != count($selection[0])) {
            $count = in_array(array_sum($result), $selection[1]) ? 1 : 0;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    //pick 3// ---------------------------->

    public static function pick3_joint(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $counts = [0, 0, 0, 0, 0];

        for ($i = 0; $i < 5; $i++) {
            if (in_array($drawnumber[$i], $selection[$i])) {
                $counts[$i]++;
            }
        }
        $count = array_reduce($counts, function ($carry, $item) {
            return $carry + ($item > 0 ? 1 : 0);
        }, 0);

        return [
            'numwins' => $count >= 3 ? 1 : 0,
            'gameids' => $count >= 3 ? [$gameId] : [],
            'status' => $count >= 3 ? 'Won' : 'Lost',
        ];
    }

    public static function pick3_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        //manual
    }

    public static function pick3_sum(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $result = array_map(fn($position) => $drawnumber[$position - 1] ?? null, $selection[0]);
        $count = in_array(array_sum($result), $selection[1]) ? 1 : 0;
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function pick3_group3(array $selection, array $drawnumber, Int $gameId = null): array
    { //review
        $count = 0;
        $result = array_map(fn($position) => $drawnumber[$position - 1] ?? null, $selection[0]);
        if (in_array(2, array_count_values($result)) || in_array(3, array_count_values($result))) {
            $val = array_count_values($result);
            $values = array_values(array_diff($result, [array_search(max($val), $val)]));
            if (in_array(array_search(max($val), $val), $selection[1]) && array_intersect($values, $selection[1])) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function pick3_group6(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $result = array_map(fn($position) => $drawnumber[$position - 1] ?? null, $selection[0]);
        if (count(array_intersect($result, $selection[1])) >= 3) {
            $count = 1;
        }
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function pick3_group_combo_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        //manual
    }

    public static function pick3_group_sum(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $result = array_map(fn($position) => $drawnumber[$position - 1] ?? null, $selection[0]);
        if (in_array(2, array_count_values($result))) {
            $count = in_array(array_sum($result), $selection[1]) ? 1 : 0;
        } else if (in_array(3, array_count_values($result))) {
            $count = 0;
        } else {
            $count = in_array(array_sum($result), $selection[1]) ? 2 : 0;
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$count] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    //pick 4// ---------------------------->

    public static function pick4_joint(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $counts = [0, 0, 0, 0, 0];

        for ($i = 0; $i < 5; $i++) {
            if (in_array($drawnumber[$i], $selection[$i])) {
                $counts[$i]++;
            }
        }
        $count = array_reduce($counts, function ($carry, $item) {
            return $carry + ($item > 0 ? 1 : 0);
        }, 0);

        return [
            'numwins' => $count >= 4 ? 1 : 0,
            'gameids' => $count >= 4 ? [$gameId] : [],
            'status' => $count >= 4 ? 'Won' : 'Lost',
        ];
    }

    public static function pick4_manual(array $selection, array $drawnumber, Int $gameId = null): array
    {
        //manual
    }

    public static function pick4_group24(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $result = array_map(fn($position) => $drawnumber[$position - 1] ?? null, $selection[0]);
        if (count(array_intersect($result, $selection[1])) >= 4) {
            $count = 1;
        }
        return [
            'numwins' => $count,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function pick4_group12(array $selection, array $drawnumber, Int $gameId = null): array
    {
        $count = 0;
        $result = array_map(fn($position) => $drawnumber[$position - 1] ?? null, $selection[0]);
        if (in_array(2, array_count_values($result))) {
            $val = array_count_values($result);
            $values = array_values(array_diff($result, [array_search(max($val), $val)]));
            if (in_array(array_search(max($val), $val), $selection[1]) && count(array_intersect($values, $selection[2])) >= 2) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function pick4_group6(array $selection, array $drawnumber, Int $gameId = null)
    {
        $count = 0;
        $result = array_map(fn($position) => $drawnumber[$position - 1] ?? null, $selection[0]);
        $val = array_count_values($result);
        $filteredValues = array_filter($val, fn($count) => $count === 2);
        if (count(array_intersect(array_keys($filteredValues), $selection[1])) == 2) {
            $count = 1;
        };
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    public static function pick4_group4(array $selection, array $drawnumber, Int $gameId = null)
    {
        $count = 0;
        $result = array_map(fn($position) => $drawnumber[$position - 1] ?? null, $selection[0]);
        if (in_array(3, array_count_values($result))) {
            $val = array_count_values($result);
            $values = array_values(array_diff($result, [array_search(max($val), $val)]));
            if (in_array(array_search(max($val), $val), $selection[1]) && count(array_intersect($values, $selection[2])) >= 1) {
                $count = 1;
            }
        }
        return [
            'numwins' => $count ? 1 : 0,
            'gameids' => $count ? [$gameId] : [],
            'status' => $count ? 'Won' : 'Lost',
        ];
    }

    //Dragon Tiger Tie// ---------------------------->

    public static function DragonTiger(array $selection, array $drawNumber, int $gameIds)
    {
        $data = [
            '1v2' => self::DT(0, 1, $drawNumber),
            '1v3' => self::DT(0, 2, $drawNumber),
            '1v4' => self::DT(0, 3, $drawNumber),
            '1v5' => self::DT(0, 4, $drawNumber),
            '2v3' => self::DT(1, 2, $drawNumber),
            '2v4' => self::DT(1, 3, $drawNumber),
            '2v5' => self::DT(1, 4, $drawNumber),
            '3v4' => self::DT(2, 3, $drawNumber),
            '3v5' => self::DT(2, 4, $drawNumber),
            '4v5' => self::DT(3, 4, $drawNumber),
        ];
        $selected = json_decode($selection[0], true);
        $count = 0;
        $won = [];
        foreach ($selected as $key => $select) {
            if (in_array($data[$key], $select)) {
                $count++;
                $won[] = $key;
            }
        }
        return [
            'numwin' => $count ? $count : 0,
            'gameids' => $won,
            'status' => $count ? 'Won' : 'Loss',
        ];
    }

    //stud// ---------------------------->

    public static function stud(array $selection, array $drawNumber, int $gameIds)
    {

        $data = [
            'Four of a Kind' => self::findPattern([4, 1], $drawNumber, 0, 5),
            'Gourd' => self::findPattern([3, 2], $drawNumber, 0, 5),
            'Streak' => self::findStreakPattern($drawNumber, 0, 5, 4),
            'Three of a Kind' => self::findPattern([3, 1, 1], $drawNumber, 0, 5),
            '2 Pairs' => self::findPattern([2, 2, 1], $drawNumber, 0, 5),
            '1 Pair' => self::findPattern([2, 1, 1, 1], $drawNumber, 0, 5),
            'Hire Card' => !self::findStreakPattern($drawNumber, 0, 5, 4) ? self::findPattern([1, 1, 1, 1, 1], $drawNumber, 0, 5) : null,
        ];
        $odds = [
            'Four of a Kind' => 0.2188,
            'Gourd' => 0.1094,
            'Streak' => 0.028,
            'Three of a Kind' => 0.0136,
            '2 Pairs' => 0.0091,
            '1 Pair' => 0.0019,
            'Hire Card' => 0.0033,
        ];

        $count = 0;
        $won = [];
        foreach ($selection as $select) {
            if ($data[$select] == true) {
                $count++;
                $won[] = [$select, $odds[$select]];
            }
        }

        return [
            'numwin' => $count ? $count : 0,
            'gameids' => $won,
            'status' => $count ? 'Won' : 'Loss',
        ];

    }

    //three card// ---------------------------->

    public static function three_card(array $selection, array $drawNumber, int $gameIds)
    {

        $data = [
            'First 3' => [
                '11' => self::findPattern([3], $drawNumber, 0, 3),
                '12' => self::findStreakPattern($drawNumber, 0, 3, 2),
                '13' => self::findPattern([2, 1], $drawNumber, 0, 3),
                '14' => self::findStreakPattern($drawNumber, 0, 3, 2) || self::findStreakPattern($drawNumber, 0, 3, 1) ? null : self::findPattern([1, 1, 1], $drawNumber, 0, 3),
                '15' => self::findStreakPattern($drawNumber, 0, 3, 1),
            ],
            'Middle 3' => [
                '11' => self::findPattern([1, 1, 1], $drawNumber, 1, 3),
                '12' => self::findStreakPattern($drawNumber, 1, 3, 2),
                '13' => self::findPattern([2, 1], $drawNumber, 1, 3),
                '14' => self::findStreakPattern($drawNumber, 0, 3, 2) || self::findStreakPattern($drawNumber, 0, 3, 1) ? null : self::findPattern([1, 1, 1], $drawNumber, 0, 3),
                '15' => self::findStreakPattern($drawNumber, 1, 3, 1),
            ],
            'Last 3' => [
                '11' => self::findPattern([1, 1, 1], $drawNumber, 0, -3, true),
                '12' => self::findStreakPattern($drawNumber, 0, -3, 2, true),
                '13' => self::findPattern([2, 1], $drawNumber, 0, -3, true),
                '14' => self::findStreakPattern($drawNumber, 0, 3, 2, true) || self::findStreakPattern($drawNumber, 0, 3, 1) ? null : self::findPattern([1, 1, 1], $drawNumber, 0, 3),
                '15' => self::findStreakPattern($drawNumber, 0, -3, 1, true),
            ],
        ];

        $count = 0;
        $won = [];
        $selected = json_decode($selection[0], true);
        foreach ($selected as $key => $select) {
            if (array_search(1, $data[$key])) {
                $count++;
                $won[] = array_search(1, $data[$key]); //[$select,$odds[$select]];
            }
        }

        return [
            'numwin' => $count ? $count : 0,
            'gameids' => $won,
            'status' => $count ? 'Won' : 'Loss',
        ];

    }

    ##bull bull function herer

}

//end of royal 5
